function dtscale = getdt(eps)
%
global totMsh
% test for the computational domain property
% Mesh generated by matlab
% ind = find(totMsh.eNodes(:,4)==1); n1 = length(ind);
% ind = find(totMsh.eNodes(:,4)==2); n2 = length(ind);
% if n1 < n2
%     Metal = 1; FreeSpac = 2;
% else
%     Metal = 2; FreeSpac = 1;
% end
% Mesh generated by Gmsh
Metal = 1; 
FreeSpac = 2;
% Number of elements.
nElem = size(totMsh.eNodes,1);
dtscale = zeros(nElem,1);
for k = 1:nElem 
    len1 = sqrt((totMsh.nCoord(totMsh.eNodes(k,2),1)-totMsh.nCoord(totMsh.eNodes(k,1),1))^2 + ...
           (totMsh.nCoord(totMsh.eNodes(k,2),2)-totMsh.nCoord(totMsh.eNodes(k,1),2))^2);
    len2 = sqrt((totMsh.nCoord(totMsh.eNodes(k,3),1)-totMsh.nCoord(totMsh.eNodes(k,2),1))^2 + ...
           (totMsh.nCoord(totMsh.eNodes(k,3),2)-totMsh.nCoord(totMsh.eNodes(k,2),2))^2);
    len3 = sqrt((totMsh.nCoord(totMsh.eNodes(k,1),1)-totMsh.nCoord(totMsh.eNodes(k,3),1))^2 + ...
           (totMsh.nCoord(totMsh.eNodes(k,1),2)-totMsh.nCoord(totMsh.eNodes(k,3),2))^2);
    %p=(a+b+c)/2 S=sqrt[p(p-a)(p-b)(p-c)] 
    sper = (len1 + len2 + len3)/2.0; 
    Area = sqrt(sper.*(sper-len1).*(sper-len2).*(sper-len3));
    if totMsh.eNodes(k,4) == Metal
        localc = 1/sqrt(1*eps);
    elseif totMsh.eNodes(k,4) == FreeSpac
        localc = 1/sqrt(1*1);
    end
    % Compute scale using radius of inscribed circle
    dtscale(k) = (Area)./(localc*sper*2);
end      